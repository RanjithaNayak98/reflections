How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Fill in your answer here

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Fill in your answer here

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Fill in your answer here

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Fill in your answer here

How can you use the commands git log and git diff to view the history of files?

    Fill in your answer here

How might using version control make you more confident to make changes that
could break something?

    Fill in your answer here

Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?


Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?


How can you use the commands git log and git diff to view the history of files?


How might using version control make you more confident to make changes that could break something?


Now that you have your workspace set up, what do you want to try using Git for?









git init
git status
git add
git reset

staging area - copy of the most recent commit untill added more changes to it.

git diff with no arguement will show the diff between changes to working directory and staging area. (git add is used to add files to staging area)

git reset --hard -  discards the changes in the working directory or the staging area (Be very careful as it is not reversible)

git diff --staged - compare staging area to most recent commit

git checkout master - to leave head detached stage

it shows (master +) if there are changes to be commited
it shows (master *) if there are changes not staged for commit

git branch <branch name> 
git branch - list all branches
git checkout <branch name> - to change the branch

remote branch - i didnt create it myself

git log --graph --oneline master coins  -to see the visual representation of the commit history

detached head - checkout a commit, not a branch

git checkout -b <new-branch-name> = git branch <new-branch-name> + git checkout <new-branch-name>

git show commit_id- to compare a commit to its parent